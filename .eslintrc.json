{
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`

        // Choose from one of the "project" configs below or omit to use <root>/tsconfig.json by default

        "project": [
          "tsconfig*.json"
        ]
      }
    }
  },
  "env": {
    "es2021": true,
    "node": true
  },
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint",
    "import"
  ],
  "rules": {
    "brace-style": ["error", "1tbs"],
    "curly": "error",
    "consistent-return": "error",
    "no-console": "off", // Not necessary in Lambda, we want to be logging things

    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "explicit",
        "overrides": {
          "constructors": "no-public"
        }
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "off", // generally handled by strict mode
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true
      }
    ],
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-inferrable-types": "off", // I prefer the verbosity
    "@typescript-eslint/no-parameter-properties": [
      "error",
      { "allows": ["private readonly"] }
    ],
    "@typescript-eslint/no-unused-vars": "error",
    "max-len": "off", // checked by prettier

    "@typescript-eslint/no-empty-function": [
      "error"
    ],

    "sort-imports": [
      "error",
      {
        "ignoreDeclarationSort": true,
        "ignoreCase": true
      }
    ],
    "import/extensions": "off",
    "import/order": [
      "error",
      {
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "pathGroups": [
          {
            "pattern": "@shoppi/**",
            "group": "external",
            "position": "after"
          }
        ],
        "groups": ["builtin", "external", ["parent", "sibling"], "object"]
      }
    ],
    "import/prefer-default-export": "off"
  },
  "overrides": [
      {
        "files": ["*.spec.ts"],

        "rules": {
        }
      }
  ]
}
